modeltype IOAutomaton uses IOAutomaton('se.studieren.mdd.transformer.IOAutomaton');
modeltype IOAutomatonPackage uses IOAutomatonPackage('se.studieren.mdd.transformer.IOAutomatonPackage');
modeltype StateMachine uses StateMachine('se.studieren.mdd.transformer.StateMachine');
modeltype StateMachinePackage uses StateMachinePackage('se.studieren.mdd.transformer.StateMachinePackage');
// modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');

transformation Step05(in ioAutomatonPackage : IOAutomatonPackage, out stateMachinePackage : StateMachinePackage);

main() {
	ioAutomatonPackage.objectsOfType(IOAutomatonPackage::IOAutomatonPackage).map toStateMachinePackage();
}

mapping IOAutomatonPackage::IOAutomatonPackage::toStateMachinePackage() : StateMachinePackage::StateMachinePackage {
	statemachine += self.ioautomaton.toStateMachine(result);	
}


helper IOAutomaton::IOAutomaton::toStateMachine(inout stp: StateMachinePackage::StateMachinePackage ) : StateMachine::StateMachine {
	var stateMachine = self.name.map stringToStateMachine(); //Each IO-Automaton to a statemachine
	
	var functionNames := self.getFunctionNames(); //all functions
	var mainRegion = self.map toRegion();//Region of this Actor StateMachine
	stateMachine.region += mainRegion; 
	
	 //for each function generate a Submachine
	stp.statemachine += functionNames.generateSubmachines(self, mainRegion)->asSequence();

	return stateMachine	
}

mapping IOAutomaton::IOAutomaton::toRegion() : StateMachine::Region {
	name := self.name;

	subvertex += self.vertex.map toState();
	
	transition += self.transition.map toTransition(result);
	
}

helper String::generateSubmachines(in iOAutomaton : IOAutomaton::IOAutomaton, inout mainReg : StateMachine::Region ) : StateMachine::StateMachine{
	var subMach := self.map stringToStateMachine();
	var reg := self.map stringToRegion();
	subMach.region := reg;
	
	/// Etry State
	var initState = self.map constructEntryState();	
	reg.subvertex += initState;
	
	//State for mainRegion, where this function is called define now
	var submachineState := self.map constructState();
	submachineState.entryPoint := initState;
	
	///Transitions from IOAutomaton used in this submachine
	var relatedTransitions := iOAutomaton.transition->select(inmessage != null)->select(inmessage.operation.name=self)->asSequence();
	var first := constructNextStepOfAlgorithm(relatedTransitions,1,reg, mainReg,submachineState); //first Actual state in this Submachine
	
	//transition to this state
	var trans := map constructTransition(initState,first);
	reg.transition += trans;
	
	//State for mainRegion, where this function is called
	submachineState.submachine := subMach;
	mainReg.subvertex += submachineState;
	
	//connect inside main region
	var sourceStateName := relatedTransitions.source->first().oclAsType(State).name; //all calling states are the same
	var sourceState := mainReg.subvertex->selectByKind(StateMachine::State).oclAsType(StateMachine::State)->select(name=sourceStateName); //can't be pseudo' 
	var inTrans = map constructTransition(sourceState->first(),submachineState);//first save, as only one possible
	inTrans.trigger := self.map constructTrigger();
	mainReg.transition += inTrans;
	
	return subMach;
}

mapping String::stringToStateMachine() : StateMachine::StateMachine{
	name := self;
}

mapping String::stringToRegion() : StateMachine::Region{
	name := self;
}

helper constructNextStepOfAlgorithm(in corrTransitions : Sequence(IOAutomaton::Transition),
		in count : Integer, inout reg : StateMachine::Region, inout mainReg : StateMachine::Region, inout submachineState: StateMachine::State) : StateMachine::Vertex{
	
	var oMessages := corrTransitions->first().outmessage->asSequence(); //All transitions related to this function
	var doActivityCode := ""; //build statename
	var i := count; //location in message
	
	//collect all messages without return type
	while(oMessages->at(i).returnvalue.oclIsKindOf(VoidValue) and i <= oMessages->size()){
		doActivityCode := doActivityCode + oMessages->at(i).getOutMessageSignature();
		i := i + 1;
	};
	
	//with returntype add call to statename
	if( oMessages->at(i).returnvalue.oclIsKindOf(Value) and i <= oMessages->size() ){
		doActivityCode := doActivityCode + oMessages->at(i).getOutMessageSignature();
	};
	
	//construct states
	var state := doActivityCode.map constructActionState(submachineState.name);
	
	if(i != count){	
		reg.subvertex += state;		
	};
	
	//if return value create branch and connect to state, if this happens we don't have final states yet
	if( oMessages->at(i).returnvalue.oclIsKindOf(Value) and i <= oMessages->size() ){
		reg.subvertex += state;
		var results = corrTransitions.getResultsAt(i)->asSet(); //all different results
		results->forEach(res){
			//split by result and call this step again
			var resultingTransactions :=  corrTransitions->select(outmessage->at(i).returnvalue.oclAsType(Value).name = res);
			var next := constructNextStepOfAlgorithm(resultingTransactions,i+1,reg, mainReg,submachineState);
			//conect this state to the result state
			var condition := "check = " + res;
			var trans := condition.map constructGuardedTransition();
			trans.source := state;
			trans.target := next;
			reg.transition += trans;
		};
	};

	//should never occur, as this is loop condition, but to do a complete case for Kind
	if(oMessages->at(i).returnvalue.oclIsKindOf(VoidValue) and i <= oMessages->size()){
		log("ERROR","should never be called");
	};
	if(not((i != count) or (oMessages->at(i).returnvalue.oclIsKindOf(Value) and i <= oMessages->size()))){
		reg.subvertex +=  state;
	};
	log("bla",submachineState.name);
	//add state to vertex, in this case we have one and only one final state
	if(i != count or not (oMessages->at(i).returnvalue.oclIsKindOf(Value) and i <= oMessages->size()) ){
		var exitState := corrTransitions.target.oclAsType(State).name.map constructExitState(submachineState.name,(corrTransitions->first().returnvalue.map toEffect()).desc);
		reg.subvertex += exitState;
		reg.transition += map constructTransition(state,exitState->first()); //save there is only one
		
		//Connect Inside Main
		var targetStateName := corrTransitions.target->first().oclAsType(State).name; //all calling states are the same
		var targetState := mainReg.subvertex->selectByKind(StateMachine::State).oclAsType(StateMachine::State)->select(name=targetStateName); //can't be pseudo' 
		var effect := corrTransitions->first().returnvalue.map toEffect();
		var outTrans = map constructTransition(submachineState,targetState->first(),effect);//first save, as only one possible
		
		//targetState->first().exitPoint += exitState;
		submachineState.exitPoint += exitState;
		
		mainReg.transition += outTrans;
	};
	
	
	return state;
}


mapping  String::constructGuardedTransition() : StateMachine::Transition{
	guard := self.map constructConstraint();
}

mapping  constructTransition(in sou : StateMachine::Vertex, in tar : StateMachine::Vertex) : StateMachine::Transition{
	source := sou;
	target := tar;
}

mapping  constructTransition(in sou : StateMachine::State, in tar : StateMachine::State, in eff : StateMachine::Behavior) : StateMachine::Transition{
	source := sou;
	target := tar;
	effect := eff;
}

mapping  constructTransition(in sou : StateMachine::Vertex, in tar : StateMachine::Vertex, in eff : String) : StateMachine::Transition{
	source := sou;
	target := tar;
	name := eff;
}

mapping  String::constructConstraint() : StateMachine::Constraint{
	constraint := self;
}


helper IOAutomaton::Transition::getResultsAt(in i:Integer) : String {
	return self.outmessage->at(i).returnvalue.oclAsType(Value).name;
}

mapping String::constructTrigger() : StateMachine::Trigger{
	trigger := self;
}

helper IOAutomaton::OutMessage::getOutMessageSignature() : String {
//TODO check only if return value
	var ret := "";
	if(self.returnvalue.oclIsKindOf(Value)){
		ret := " check := ";
	};
	return ret+getRecieverName(self.actorobject)+"."+self.operation.name+" ";
}
mapping String::constructActionState(in subMachName : String) :  StateMachine::State{
	name := subMachName+":"+self;
	doActivity := self.map constructCodeBlock();
}



mapping String::constructCodeBlock() : StateMachine::CodeBlock{
	desc := self;
}

helper getRecieverName(in act : IOAutomaton::ActorObject) : String {
	if(act.oclIsKindOf(User))
		return "User";
	return act.oclAsType(SystemObject).name;
}

helper IOAutomaton::IOAutomaton::getFunctionNames() : Set(String) {//getAllFunctions
	return self.transition->select(inmessage != null)->collectNested(inmessage.operation.name)->asSet();
}

mapping String::constructInitState() : StateMachine::PseudoState {
	name := self;
	pseudoStateKind := PseudoStateKind::initial;
}

mapping String::constructEntryState() : StateMachine::PseudoState {
	name := self;
	pseudoStateKind := PseudoStateKind::entryPoint;
}

mapping String::constructExitState(in submachineName: String, in retVal : String) : StateMachine::PseudoState {
	name := submachineName+":"+self;
	pseudoStateKind := PseudoStateKind::exitPoint;
	returnValue := retVal;
}

mapping IOAutomaton::Vertex::toState() : StateMachine::Vertex 	
	disjuncts IOAutomaton::InitialState::toInitialState,
	          IOAutomaton::State::toStableState;
	          
mapping IOAutomaton::Transition::toTransition(in mainReg : StateMachine::Region) : StateMachine::Transition
when{
	self.source.oclIsKindOf(IOAutomaton::InitialState)
} 	
{
	//there is ony one itialState
	source := mainReg.subvertex->selectByKind(StateMachine::PseudoState)->oclAsType(StateMachine::PseudoState)->select(pseudoStateKind = PseudoStateKind::initial)->asSequence()->first();
	target := mainReg.subvertex->selectByKind(StateMachine::State)->select(self.target.oclAsType(State).name = name)->asSequence()->first(); //uniquly by name
	
}
	          	          
mapping IOAutomaton::InitialState::toInitialState() : StateMachine::PseudoState {
	name := "entry";
	pseudoStateKind := PseudoStateKind::initial;
}


mapping String::constructState() : StateMachine::State {
	name := self;
}
mapping IOAutomaton::State::toStableState() : StateMachine::State {
	name := self.name;
}
mapping IOAutomaton::InMessage::toAcivityState() : StateMachine::State{
	name := self.operation.name;
}

mapping IOAutomaton::ReturnValue::toEffect() : StateMachine::CodeBlock 
	disjuncts 
		 IOAutomaton::Value::toEffect,
		IOAutomaton::VoidValue::toEffect;
	

mapping IOAutomaton::Value::toEffect() : StateMachine::CodeBlock {
	desc := "return " + self.name;
}
mapping IOAutomaton::VoidValue::toEffect() : StateMachine::CodeBlock{
	desc := "return void";
} 