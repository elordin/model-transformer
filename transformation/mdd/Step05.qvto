modeltype IOAutomaton uses IOAutomaton('se.studieren.mdd.transformer.IOAutomaton');
modeltype IOAutomatonPackage uses IOAutomatonPackage('se.studieren.mdd.transformer.IOAutomatonPackage');
modeltype StateMachine uses StateMachine('se.studieren.mdd.transformer.StateMachine');
modeltype StateMachinePackage uses StateMachinePackage('se.studieren.mdd.transformer.StateMachinePackage');
// modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');

transformation Step05(in ioAutomatonPackage : IOAutomatonPackage, out stateMachinePackage : StateMachinePackage);

main() {
	ioAutomatonPackage.objectsOfType(IOAutomatonPackage::IOAutomatonPackage).map toStateMachinePackage();
}

mapping IOAutomatonPackage::IOAutomatonPackage::toStateMachinePackage() : StateMachinePackage::StateMachinePackage {
	statemachine += self.ioautomaton.map toStateMachine();
}

mapping IOAutomaton::IOAutomaton::toStateMachine() : StateMachine::StateMachine {
	name := null; // self.name;
	region += self.map toRegion();	
}

mapping IOAutomaton::IOAutomaton::toRegion() : StateMachine::Region {
	name := "Main Region";

	subvertex += self.objectsOfType(IOAutomaton::InitialState).map toInitialState();
	subvertex += self.objectsOfType(IOAutomaton::State).map toStableState();
	
	// TODO Create Activity Diagrams 
	// TODO Create Submachines
	// TODO Create Transitions
}

mapping IOAutomaton::InitialState::toInitialState() : StateMachine::PseudoState {
	name := "entry";
	pseudoStateKind := PseudoStateKind::initial;
}

mapping IOAutomaton::State::toStableState() : StateMachine::State {
	name := self.name;
}