modeltype BehaviourTablePackage uses BehaviourTablePackage('se.studieren.mdd.transformer.BehaviourTablePackage');
modeltype BehaviourTable uses BehaviourTable('se.studieren.mdd.transformer.BehaviourTable');
modeltype IOAutomatonPackage uses IOAutomatonPackage('se.studieren.mdd.transformer.IOAutomatonPackage');
modeltype IOAutomaton uses IOAutomaton('se.studieren.mdd.transformer.IOAutomaton');

transformation Step04(in btp:BehaviourTablePackage, out ioap:IOAutomatonPackage);


main() {
	btp.objectsOfType(BehaviourTablePackage::BehaviourTablePackage).map toIOAutomatonPackage();
}

mapping BehaviourTablePackage::BehaviourTablePackage::toIOAutomatonPackage() : IOAutomatonPackage::IOAutomatonPackage {
	var systemobjectNames = self.behaviour->collectNested(systemobject.name)->asSet(); //get unique names of systemobjects behaviour belongs to

	ioautomaton += systemobjectNames.map toIOAutomaton(self.behaviour);	//create one ioatomaton for each unique name
}

helper String::createIOAutomaton(in bList : OrderedSet(BehaviourTable::Behaviour)) : IOAutomaton::IOAutomaton { 
	
	var behaivors = bList->select(systemobject.name = self);	//get behaivors to be merged into actual ioautomaton
	
	var stateNames = behaivors->collectNested(state)->flatten()->collectNested(name); //get unique names of all states	
	var states = stateNames.map toState();
	
	var ioa = object IOAutomaton::IOAutomaton {
		systemobject := behaivors->at(1).systemobject.map toSystemObject();
		vertex += states;
		transition += behaivors->collect(block)->flatten().map toTransition(states);	
	};
	
	return ioa;
}

mapping String::toIOAutomaton(in allbehaivors : OrderedSet(BehaviourTable::Behaviour)) : IOAutomaton::IOAutomaton { 
	var behaivors = allbehaivors->select(systemobject.name = self);	
	var stateNames = behaivors->collectNested(state)->flatten()->collectNested(name); //get names of all states	
	var states = stateNames.map toState();	
	
	var initialState = object IOAutomaton::InitialState{};
	var initialTransition = object IOAutomaton::Transition{source := initialState; target := states->at(1)};
	
	systemobject := behaivors->at(1).systemobject.map toSystemObject();
	vertex += states;
	vertex += initialState;
	transition += behaivors->collect(block)->flatten().map toTransition(states);	
	transition += initialTransition;
	name := self;
}

mapping String::toState() : IOAutomaton::State {
	name := self;
}

mapping BehaviourTable::SystemObject::toSystemObject() : IOAutomaton::SystemObject {
	name := self.name;
}

mapping BehaviourTable::Block::toTransition(in states : Sequence(IOAutomaton::State)) : IOAutomaton::Transition {
	inmessage := self.inmessage.map toInMessage();
	outmessage += self.activation.outmessages.map toOutMessage();
	returnvalue := self.activation.returnvalue.map toReturnValue();
	source := states->any(name = self.preState.name);	//set reference to correct state
	target :=  states->any(name = self.postState.name);	//set reference to correct state
}

mapping BehaviourTable::InMessage::toInMessage() : IOAutomaton::InMessage {
	operation := self.operation.map toOperation();	
}

mapping BehaviourTable::Operation::toOperation() : IOAutomaton::Operation {
	name := self.name;	
}

mapping BehaviourTable::OutMessage::toOutMessage() : IOAutomaton::OutMessage {
	operation := self.operation.map toOperation();
	returnvalue := self.returnvalue.map toReturnValue();
	actorobject := self.actorobject.map toActorObject();
}

mapping BehaviourTable::ReturnValue::toReturnValue() : IOAutomaton::ReturnValue
disjuncts BehaviourTable::VoidValue::toVoidValue, BehaviourTable::Value::toValue;


mapping BehaviourTable::VoidValue::toVoidValue() : IOAutomaton::VoidValue;

mapping BehaviourTable::Value::toValue() : IOAutomaton::Value {	
	name:=self.value;
}

mapping BehaviourTable::ActorObject::toActorObject() : IOAutomaton::ActorObject
disjuncts BehaviourTable::User::toUser, BehaviourTable::SystemObject::toSystemObject;


mapping BehaviourTable::User::toUser() : IOAutomaton::User;



