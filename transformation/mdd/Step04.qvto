modeltype BehaviourTable uses BehaviourTable('se.studieren.mdd.transformer.BehaviourTable');
modeltype IOAutomaton uses IOAutomaton('se.studieren.mdd.transformer.IOAutomaton');

transformation Step04(in bt: BehaviourTable, out ioa: IOAutomaton);

main() {
	//bt.map toIOAutomaton();
	bt.rootObjects()[BehaviourTable::Behaviour].map toIOAutomaton();
}

mapping BehaviourTable::Behaviour::toIOAutomaton() : IOAutomaton::IOAutomaton
{
	systemobject := self.systemobject.map toSystemObject();
	vertex += self.states.map toState();
	transition += self.block.map toTransition();

}

mapping BehaviourTable::SystemObject::toSystemObject() : IOAutomaton::SystemObject
{
	name := self.name;
}

mapping BehaviourTable::State::toState() : IOAutomaton::State
{
	name := self.name;	
}

mapping BehaviourTable::Block::toState() : IOAutomaton::Transition
{
	inmessage := self.inmessage.map toInMessage();
	outmessage += self.activation.outmessages.map toOutMessage();
}

mapping BehaviourTable::InMessage::toInMessage() : IOAutomaton::InMessage
{
	operation := self.operation.map toOperation();	
}

mapping BehaviourTable::Operation::toOperation() : IOAutomaton::Operation
{
	name := self.name;	
}

mapping BehaviourTable::OutMessage::toOutMessage() : IOAutomaton::OutMessage
{
	operation := self.operation.map toOperation();
	returnvalue := self.returned.map toReturnValue();
	object := self._object.map toActorObject();
}

