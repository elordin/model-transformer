modeltype BehaviourTable uses BehaviourTable('se.studieren.mdd.transformer.BehaviourTable');
modeltype IOAutomaton uses IOAutomaton('se.studieren.mdd.transformer.IOAutomaton');

transformation Step04(in bt: BehaviourTable, out ioa: IOAutomaton);

main() {
	//bt.map toIOAutomaton();
	bt.rootObjects()[BehaviourTable::Behaviour].map toIOAutomaton();
}

mapping BehaviourTable::Behaviour::toIOAutomaton() : IOAutomaton::IOAutomaton
{
	systemobject := self.systemobject.map toSystemObject();
	vertex += self.block.preState->union(self.block.postState).map toState();

	//vertex += .map toState();
}

helper BehaviourTable::State::copyState(in b :BehaviourTable::Behaviour) : IOAutomaton::State
{ 
	var state := object IOAutomaton::State {
		name := self.name;
	};
	return state;
}

mapping BehaviourTable::SystemObject::toSystemObject() : IOAutomaton::SystemObject
{
	name := self.name;
}

mapping BehaviourTable::State::toState() : IOAutomaton::State
{
	name := self.name;	
}

