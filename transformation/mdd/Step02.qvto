modeltype InteractionDiagram uses InteractionDiagram('se.studieren.mdd.transformer.InteractionDiagram');
modeltype ScenarioTable uses ScenarioTable('se.studieren.mdd.transformer.ScenarioTable');

transformation Step02(in interactionDiagram: InteractionDiagram, out scenarioTable: ScenarioTable);

main() {
	interactionDiagram.objectsOfType(InteractionDiagram::Interaction).map toScenarioTable();
}

mapping InteractionDiagram::Interaction::toScenarioTable() : ScenarioTable::Scenario {

	state += self.fragment[InteractionDiagram::StateInvariant].map transformStateInvariant();
	actor += self.lifeline.map transformLifeline();
	
	communication += self.message.map transformMessage();
}

query isUser(in l : InteractionDiagram::Lifeline) : Boolean {
	return (l.name = "User") or (l.name = "user");
}

mapping InteractionDiagram::StateInvariant::transformStateInvariant() : ScenarioTable::State {
	name := self.name;
}

mapping InteractionDiagram::Lifeline::transformLifeline() : ScenarioTable::ActorObject
	disjuncts InteractionDiagram::Lifeline::toUserObject,
	          InteractionDiagram::Lifeline::toSystemObject;
    
mapping InteractionDiagram::Lifeline::toUserObject() : ScenarioTable::User 
when {
	isUser(self);		
}{
	log("Lifeline to User: " + self.name);
	name := "User"; // Note that this will not show up in the XMI since it is the default value.
}

mapping InteractionDiagram::Lifeline::toSystemObject() : ScenarioTable::SystemObject {
	log("Lifeline to SystemObject: " + self.name);
	name := self.name;
}

mapping InteractionDiagram::Message::transformMessage() : ScenarioTable::Communication
	disjuncts InteractionDiagram::Message::toUserCommunication,
			  InteractionDiagram::Message::toSystemCommunication;

mapping InteractionDiagram::Message::toUserCommunication() : ScenarioTable::UserCommunication 
when {
	isUserMessage(self);
}{
	usermessage := self.map toUserMessage();
	returned := returnValue(self);
}

mapping InteractionDiagram::Message::toUserMessage() : ScenarioTable::UserMessage 
when {
	isUserMessage(self);
}{
	name := self.name;
	receiver := self.receiveEvent[InteractionDiagram::MessageOccurenceSpecification]->any(true).covered.map toUserObject();
	operation := object ScenarioTable::Operation{
		name := self.name;
	};
	sender := self.sendEvent[InteractionDiagram::MessageOccurenceSpecification]->any(true).covered.map transformLifeline();
}

query isUserMessage(in m : InteractionDiagram::Message) : Boolean {
	var name = m.receiveEvent[InteractionDiagram::MessageOccurenceSpecification]->any(true).covered.name;
	return name = "User" or name = "user";
}

mapping InteractionDiagram::Message::toSystemCommunication() : ScenarioTable::SystemCommunication {

	var recipient : InteractionDiagram::Lifeline = self.receiveEvent[InteractionDiagram::MessageOccurenceSpecification]->any(true).covered;
	
	var receiveIndex = recipient.coveredBy->indexOf(self.receiveEvent);
	var preReceiveSIs : OrderedSet(InteractionDiagram::StateInvariant) = recipient.coveredBy[InteractionDiagram::StateInvariant];
	var postReceiveSIs : OrderedSet(InteractionDiagram::StateInvariant) = recipient.coveredBy[InteractionDiagram::StateInvariant];
		
	prestate := preReceiveSIs->last().map transformStateInvariant();
	poststate := postReceiveSIs->first().map transformStateInvariant();
	systemmessage := self.map toSystemMessage();
	returned := returnValue(self);
}

mapping InteractionDiagram::Message::toSystemMessage() : ScenarioTable::SystemMessage {
	name := self.name;
	sender := self.sendEvent[InteractionDiagram::MessageOccurenceSpecification]->any(true).covered.map transformLifeline();
	operation := object ScenarioTable::Operation{
		name := self.name;
	};
	receiver := self.receiveEvent[InteractionDiagram::MessageOccurenceSpecification]->any(true).covered.map toSystemObject();
}

helper returnValue(in m : Message) : ScenarioTable::ReturnValue {
	if (m.messageSort = InteractionDiagram::MessageSort::reply) 
		return object ScenarioTable::Value{
			value := m.name;
		}
	else return object ScenarioTable::VoidValue{};
}
