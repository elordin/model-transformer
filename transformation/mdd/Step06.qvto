modeltype StateMachine uses StateMachine('se.studieren.mdd.transformer.StateMachine');
modeltype StateMachinePackage uses StateMachinePackage('se.studieren.mdd.transformer.StateMachinePackage');
modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');

transformation Step06(in stateMachinePackage : StateMachinePackage, out umlStatemachine: UML );

main() {
	stateMachinePackage.objectsOfType(StateMachinePackage::StateMachinePackage).map toStateMachinePackage();
	// ioAutomatonPackage.objectsOfType(IOAutomatonPackage::IOAutomatonPackage).map toStateMachinePackage();
}

mapping StateMachinePackage::StateMachinePackage::toStateMachinePackage() : UML::Package{
	packagedElement += self.statemachine.map toStateMachine();	
}

mapping StateMachine::StateMachine::toStateMachine() : UML::StateMachine{
	name := self.name;
	region := self.region.map toRegion();
}

mapping StateMachine::Region::toRegion() : UML::Region {
	name := self.name;
	subvertex := self.subvertex.map toVertex();
	transition := self.transition.map toTransition();
}
mapping StateMachine::Transition::toTransition() : UML::Transition{
	source := (self.source).resolveoneIn(StateMachine::Vertex::toVertex,UML::Vertex);
	effect := self.effect.map toEffect();
	
	if(source.oclAsType(UML::State).submachine!=null){
		//get the right exitpoint
		log("t",source.oclAsType(UML::State).connection->select(e|(not e.exit->isEmpty())));
		source := source.oclAsType(UML::State).connection
			->select(e|(not e.exit->isEmpty()) and (e.name->asSequence()->first() = (self.source.name+":"+self.target.name->asSequence()->first()+":"+effect.oclAsType(UML::OpaqueBehavior).body->first())))->asSequence()->first();
	};
	
	target := (self.target).resolveoneIn(StateMachine::Vertex::toVertex,UML::Vertex);
	if(target.oclAsType(UML::State).submachine!=null){
		//get Entry Point connnector
		target := target.oclAsType(UML::State).connection->any(e|not e.entry->isEmpty()); //there is always only one
	};
	guard := self.guard.map toGuard();
	
	trigger := self.trigger.map toTrigger();
}

mapping StateMachine::Trigger::toTrigger() : UML::Trigger{
	name := self.trigger;
	event := object UML::AnyReceiveEvent{
		name := self.trigger;
	};
}

mapping StateMachine::Behavior::toEffect() : UML::OpaqueBehavior 
	disjuncts StateMachine::CodeBlock::toEffect;

mapping StateMachine::CodeBlock::toEffect() : UML::OpaqueBehavior{
	body := self.desc;
}
mapping StateMachine::Constraint::toGuard() : UML::Constraint{
	name := self.constraint;
	specification := object UML::OpaqueExpression{
		body := self.constraint;
	};
}

mapping StateMachine::Vertex::toVertex() : UML::Vertex
	disjuncts StateMachine::State::toState,
				StateMachine::PseudoState::toPseudoState;
			
mapping StateMachine::State::toState() : UML::State{
	name := self.name;
	if(self.submachine != null){
		var enP := self.entryPoint.resolveoneIn(StateMachine::PseudoState::toPseudoState,UML::Pseudostate);
		connection += object UML::ConnectionPointReference {
			name := self.name;
			entry += enP;
		};
		var exPs := self.exitPoint.resolveIn(StateMachine::PseudoState::toPseudoState,UML::Pseudostate);
		log("exPs", self.exitPoint.name);
		exPs->forEach(exP){
			connection += object UML::ConnectionPointReference {
					name := exP.name;
					exit := exP;
				};
		};
		submachine := self.submachine.resolveoneIn(StateMachine::StateMachine::toStateMachine,UML::StateMachine);
	}
}
	
mapping StateMachine::PseudoState::toPseudoState() : UML::Pseudostate{
	name := self.name+":"+self.returnValue;
	kind := self.pseudoStateKind.getPseudostate();
}

helper StateMachine::PseudoStateKind::getPseudostate() : UML::PseudostateKind{
	if(self = StateMachine::PseudoStateKind::initial) return UML::PseudostateKind::initial;
	if(self = StateMachine::PseudoStateKind::entryPoint) return UML::PseudostateKind::entryPoint;
	if(self = StateMachine::PseudoStateKind::exitPoint) return UML::PseudostateKind::exitPoint;
	return null;
}