modeltype UML uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype InteractionDiagram uses InteractionDiagram('se.studieren.mdd.transformer.InteractionDiagram');

transformation Step01(in umlInteraction: UML, out customInteraction: InteractionDiagram);

main() {
	umlInteraction.objectsOfType(UML::Model).packagedElement[UML::Interaction].map transformInteraction();
}

mapping UML::Interaction::transformInteraction() : InteractionDiagram::Interaction {
	lifeline += self.ownedElement[UML::Lifeline].map transformLifeline();
	
	fragment += self.fragment->asOrderedSet().map transformInteractionFragment();

	message += self.message.map transformMessage();
}

mapping UML::Lifeline::transformLifeline() : InteractionDiagram::Lifeline {
	name := self.name;
	coveredBy += self.coveredBy[UML::InteractionFragment].map transformInteractionFragment();
}

mapping UML::Message::transformMessage() : InteractionDiagram::Message {
	name := self.name;
	sendEvent := self.sendEvent.map transformMessageEnd();
	receiveEvent := self.receiveEvent.map transformMessageEnd();
	messageSort := self.transformMessageSort(self.messageSort);
}

mapping UML::MessageEnd::transformMessageEnd() : InteractionDiagram::MessageEnd
	disjuncts UML::MessageOccurrenceSpecification::transformMessageOccurenceSpecification;
	
mapping UML::MessageOccurrenceSpecification::transformMessageOccurenceSpecification() : InteractionDiagram::MessageOccurenceSpecification {
	name := self.name;
	// covered := self.covered->any(true).map transformLifeline();
}

helper UML::Message::transformMessageSort(in s : UML::MessageSort) : InteractionDiagram::MessageSort {
	if (s = UML::MessageSort::synchCall) 		return InteractionDiagram::MessageSort::synchCall;
	if (s = UML::MessageSort::asynchCall) 		return InteractionDiagram::MessageSort::asynchCall;
	if (s = UML::MessageSort::asynchSignal) 	return InteractionDiagram::MessageSort::asynchSignal;
	if (s = UML::MessageSort::createMessage) 	return InteractionDiagram::MessageSort::createMessage;
	if (s = UML::MessageSort::deleteMessage) 	return InteractionDiagram::MessageSort::deleteMessage;
	if (s = UML::MessageSort::reply) 			return InteractionDiagram::MessageSort::reply;
	log("Could not resolve " + s.toString());
	return null;
}

mapping UML::InteractionFragment::transformInteractionFragment() : InteractionDiagram::InteractionFragment
	disjuncts UML::MessageOccurrenceSpecification::transformMessageOccurenceSpecification,
			  UML::BehaviorExecutionSpecification::transformBehaviourExecutionSpecification,
			  UML::InteractionOperand::transformInteractionOperand, 
			  UML::CombinedFragment::transformCombinedFragment,
			  UML::ExecutionSpecification::transformExecutionSpecification,
			  UML::Interaction::transformInteraction,
			  UML::OccurrenceSpecification::transformOccurrenceSpecification,
			  UML::StateInvariant::transformStateInvariant;

mapping UML::InteractionOperand::transformInteractionOperand() : InteractionDiagram::InteractionOperand {
	name := self.name;
	fragment += self.fragment.map transformInteractionFragment();
}		  

mapping UML::CombinedFragment::transformCombinedFragment() : InteractionDiagram::CombinedFragment {
	name := self.name;
	operand += self.operand.map transformInteractionOperand();
	interactionOperator := self.transformOperatorKind(self.interactionOperator);
}

helper UML::CombinedFragment::transformOperatorKind(in k : UML::InteractionOperatorKind) : InteractionDiagram::InteractionOperatorKind {
	return null; // TODO
}
  
mapping UML::BehaviorExecutionSpecification::transformBehaviourExecutionSpecification() : InteractionDiagram::BehaviorExecutionSpecification {
	name := self.name;
	start := self.start.map transformOccurrenceSpecification();
	finish := self.finish.map transformOccurrenceSpecification();
}
  
mapping UML::ExecutionSpecification::transformExecutionSpecification() : InteractionDiagram::ExecutionSpecification {
	name := self.name;
}

mapping UML::OccurrenceSpecification::transformOccurrenceSpecification() : InteractionDiagram::OccurrenceSpecification {
	name := self.name;
}

mapping UML::StateInvariant::transformStateInvariant() : InteractionDiagram::StateInvariant {
	name := self.name;
	invariant := self.invariant.map transformConstraint();
}

mapping UML::Constraint::transformConstraint() : InteractionDiagram::Constraint {
	
}