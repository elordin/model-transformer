modeltype ScenarioTable uses ScenarioTable('se.studieren.mdd.transformer.ScenarioTable');
modeltype ScenarioTablePackage uses ScenarioTablePackage('se.studieren.mdd.transformer.ScenarioTablePackage');
modeltype BehaviourTable uses BehaviourTable('se.studieren.mdd.transformer.BehaviourTable');
modeltype BehaviourTablePackage uses BehaviourTablePackage('se.studieren.mdd.transformer.BehaviourTablePackage');

transformation Step03(in scenarioTablePackage: ScenarioTablePackage, out behaviourTablePackage: BehaviourTablePackage);

main() {
	scenarioTablePackage.objectsOfType(ScenarioTablePackage::ScenarioTablePackage).map transformScenarioTablePackage();
}

mapping ScenarioTablePackage::ScenarioTablePackage::transformScenarioTablePackage() : BehaviourTablePackage::BehaviourTablePackage {
	behaviour += self.scenario.transformScenarioTable();
}

helper ScenarioTable::Scenario::transformScenarioTable() : OrderedSet(BehaviourTable::Behaviour) {
	var res : OrderedSet(BehaviourTable::Behaviour);
	
	self.actor->selectByKind(ScenarioTable::SystemObject)->forEach(sysObjectScenario) {
		res += self.transformScenarioTable(sysObjectScenario);
	};
	
	return res;
}

helper ScenarioTable::Scenario::transformScenarioTable(in sysObjectScenario : ScenarioTable::SystemObject) : BehaviourTable::Behaviour {
	var behaviour = object Behaviour {
		systemobject := sysObjectScenario.map transformSystemObject();
	};
	
	var currentBlock:BehaviourTable::Block = null;
	self.communication->forEach(c) {
		if(c.oclIsKindOf(ScenarioTable::UserCommunication)) {
			var userCom = c.oclAsType(ScenarioTable::UserCommunication);
			var msg := userCom.usermessage.oclAsType(ScenarioTable::UserMessage);
			if(msg.sender = sysObjectScenario) {
				// new outmessage to currentBlock
				currentBlock.activation.outmessages += userCom.map transformCommunicationToOutMessage();
			}
			
		} else if(c.oclIsKindOf(ScenarioTable::SystemCommunication)) {
			var sysCom := c.oclAsType(ScenarioTable::SystemCommunication);
			var msg := sysCom.systemmessage.oclAsType(ScenarioTable::SystemMessage);
			if(msg.receiver = sysObjectScenario) {
				// inmessage -> new block
				currentBlock := sysCom.map transformSystemCommunicationToBlock();
				behaviour.block += currentBlock;
				
				// add states
				behaviour.state += currentBlock.preState;
				behaviour.state += currentBlock.postState;
			} else if(msg.sender = sysObjectScenario) {
				// new outmessage to currentBlock
				currentBlock.activation.outmessages += sysCom.map transformCommunicationToOutMessage();
			}
		};
	};
	
	return behaviour;
}

mapping ScenarioTable::Communication::transformCommunicationToOutMessage() : BehaviourTable::OutMessage
	disjuncts 
		ScenarioTable::UserCommunication::transformUserCommunicationToOutMessage, 
		ScenarioTable::SystemCommunication::transformSystemCommunicationToOutMessage;

mapping ScenarioTable::UserCommunication::transformUserCommunicationToOutMessage() : BehaviourTable::OutMessage {
	// Workaround
	//actorobject := self.usermessage.receiver.map transformUser();
	//operation := self.usermessage.operation.map transformOperation();
	//returnvalue := self.returned.map transformReturnValue();
	
	actorobject := self.usermessage.receiver.helperTransformUser();
	operation := self.usermessage.operation.helperTransformOperation();
	returnvalue := self.returned.helperTransformReturnValue();
}

mapping ScenarioTable::SystemCommunication::transformSystemCommunicationToOutMessage() : BehaviourTable::OutMessage {
	// Workaround
	//actorobject := self.systemmessage.receiver.map transformActor();
	//operation := self.systemmessage.operation.map transformOperation();
	//returnvalue := self.returned.map transformReturnValue();
	
	actorobject := self.systemmessage.receiver.helperTransformActor();
	operation := self.systemmessage.operation.helperTransformOperation();
	returnvalue := self.returned.helperTransformReturnValue();
}

mapping ScenarioTable::SystemCommunication::transformSystemCommunicationToBlock() : BehaviourTable::Block {
	preState := self.prestate.map transformState();
	postState := self.poststate.map transformState();
	inmessage := self.systemmessage.map transformSystemMessageToInMessage();
	activation := object Activation {
		returnvalue := self.returned.map transformReturnValue();
	}
}

mapping ScenarioTable::SystemMessage::transformSystemMessageToInMessage() : BehaviourTable::InMessage {
	operation := self.operation.map transformOperation();
}

mapping ScenarioTable::Operation::transformOperation() : BehaviourTable::Operation {
	name := self.name;
}

helper ScenarioTable::Operation::helperTransformOperation() : BehaviourTable::Operation {
	return object BehaviourTable::Operation {
		name := self.name;
	}
}

mapping ScenarioTable::ActorObject::transformActor() : BehaviourTable::ActorObject
	disjuncts ScenarioTable::User::transformUser,
	          ScenarioTable::SystemObject::transformSystemObject;

mapping ScenarioTable::User::transformUser() : BehaviourTable::User {
}

mapping ScenarioTable::SystemObject::transformSystemObject() : BehaviourTable::SystemObject {
	name := self.name;
}

helper ScenarioTable::ActorObject::helperTransformActor() : BehaviourTable::ActorObject {
	if(self.oclIsTypeOf(ScenarioTable::User)) {
		return self.oclAsType(ScenarioTable::User).helperTransformUser();
	} else if(self.oclIsTypeOf(ScenarioTable::SystemObject)) {
		return self.oclAsType(ScenarioTable::SystemObject).helperTransformSystemObject();
	};
	
	return null;
}

helper ScenarioTable::User::helperTransformUser() : BehaviourTable::User {
	return object BehaviourTable::User {};
}

helper ScenarioTable::SystemObject::helperTransformSystemObject() : BehaviourTable::SystemObject {
	return object BehaviourTable::SystemObject {
		name := self.name;
	}
}

mapping ScenarioTable::State::transformState() : BehaviourTable::State {
	name := self.name;
}

helper ScenarioTable::State::helperTransformState() : BehaviourTable::State {
	return object BehaviourTable::State {
		name := self.name;
	}
}

mapping ScenarioTable::ReturnValue::transformReturnValue() : BehaviourTable::ReturnValue
	disjuncts ScenarioTable::VoidValue::transformVoidValue,
	          ScenarioTable::Value::transformValue;

mapping ScenarioTable::VoidValue::transformVoidValue() : BehaviourTable::VoidValue {

}

mapping ScenarioTable::Value::transformValue() : BehaviourTable::Value {
	value := self.value;
}

helper ScenarioTable::ReturnValue::helperTransformReturnValue() : BehaviourTable::ReturnValue {
	if(self.oclIsTypeOf(ScenarioTable::Value)) {
		return self.oclAsType(ScenarioTable::Value).helperTransformValue();
	} else if(self.oclIsTypeOf(ScenarioTable::VoidValue)) {
		return self.oclAsType(ScenarioTable::VoidValue).helperTransformVoidValue();
	};
	
	return null;
}

helper ScenarioTable::VoidValue::helperTransformVoidValue() : BehaviourTable::VoidValue {
	return object BehaviourTable::VoidValue {};
}

helper ScenarioTable::Value::helperTransformValue() : BehaviourTable::Value {
	return object BehaviourTable::Value {
		value := self.value;
	}
}