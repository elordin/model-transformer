modeltype ScenarioTable uses ScenarioTable('se.studieren.mdd.transformer.ScenarioTable');
modeltype ScenarioTablePackage uses ScenarioTablePackage('se.studieren.mdd.transformer.ScenarioTablePackage');
modeltype BehaviourTable uses BehaviourTable('se.studieren.mdd.transformer.BehaviourTable');
modeltype BehaviourTablePackage uses BehaviourTablePackage('se.studieren.mdd.transformer.BehaviourTablePackage');

transformation Step03(in scenarioTablePackage: ScenarioTablePackage, out behaviorTablePackage: BehaviourTablePackage);

main() {
	scenarioTable.objectsOfType(ScenarioTable::Scenario).map transformScenarioTable();
}

mapping ScenarioTable::Scenario::transformScenarioTable() : BehaviourTable::Behaviour {
	actor += self.actor.map transformActor();
	state += self.state.map transformState();
	
	block += null; // TODO
}

mapping ScenarioTable::ActorObject::transformActor() : BehaviourTable::ActorObject
	disjuncts ScenarioTable::User::transformUser,
	          ScenarioTable::SystemObject::transformSystemObject;

mapping ScenarioTable::User::transformUser() : BehaviourTable::User {
}

mapping ScenarioTable::SystemObject::transformSystemObject() : BehaviourTable::SystemObject {
	name := self.name;
}

mapping ScenarioTable::State::transformState() : BehaviourTable::State {
	name := self.name;
}

mapping ScenarioTable::ReturnValue::transformReturnValue() : BehaviourTable::ReturnValue
	disjuncts ScenarioTable::VoidValue::transformVoidValue,
	          ScenarioTable::Value::transformValue;

mapping ScenarioTable::VoidValue::transformVoidValue() : BehaviourTable::VoidValue {

}

mapping ScenarioTable::Value::transformValue() : BehaviourTable::Value {
	value := self.value;
}